//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Layout {
  normal
  landscape
}

model Archetype {
  id         Int      @id() @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  name       String
  notes      String?
  decks      Deck[]

  @@map("archetypes")
}

model Deck {
  id          Int            @id() @default(autoincrement())
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt()
  name        String
  description String?
  user_id     Int
  archetypes  Archetype[]
  cards       CardsOnDecks[]
  inks        Ink[]
  user        User           @relation(fields: [user_id], references: [id])

  @@map("decks")
}

model CardsOnDecks {
  qty     Int  @default(0)
  card_id Int
  deck_id Int
  card    Card @relation(fields: [card_id], references: [id])
  deck    Deck @relation(fields: [deck_id], references: [id])

  @@id(name: "id", fields: [card_id, deck_id])
}

model Card {
  id              Int              @id() @default(autoincrement())
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt()
  number          String
  set_card_number Int
  name            String
  version         String?
  full_name       String
  inkable         Boolean
  cost            Int
  lore            Int?
  strength        Int?
  willpower       Int?
  movement        Int?
  text            String?
  image           String?
  illustrators    String[]
  layout          Layout
  is_banned       Boolean?         @default(false)
  tcg_player_id   Int?             @unique()
  franchise_id    Int?
  rarity_id       Int
  set_id          Int
  deck            CardsOnDecks[]
  classifications Classification[]
  collection      Collection[]
  franchise       Franchise?       @relation(fields: [franchise_id], references: [id])
  inks            Ink[]
  keywords        Keyword[]
  rarity          Rarity           @relation(fields: [rarity_id], references: [id])
  set             Set              @relation(fields: [set_id], references: [id])
  types           Type[]

  @@unique([set_id, number])
  @@map("cards")
}

model Classification {
  id         Int      @id() @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  name       String
  notes      String?
  cards      Card[]

  @@map("classifications")
}

model Collection {
  plain_count Int     @default(0)
  foil_count  Int     @default(0)
  notes       String?
  card_id     Int
  user_id     Int
  card        Card    @relation(fields: [card_id], references: [id])
  user        User    @relation(fields: [user_id], references: [id])

  @@id(name: "id", fields: [user_id, card_id])
  @@map("collections")
}

model User {
  id           Int          @id() @default(autoincrement())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt()
  auth_id      String       @unique()
  name         String?
  allow_trades Boolean      @default(false)
  country      String?
  postal_code  String?
  decks        Deck[]
  collection   Collection[]

  @@map("users")
}

model Franchise {
  id         Int         @id() @default(autoincrement())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt()
  name       String
  notes      String?
  cards      Card[]
  characters Character[]

  @@map("franchises")
}

model Character {
  id           Int       @id() @default(autoincrement())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt()
  name         String
  notes        String?
  franchise_id Int
  franchise    Franchise @relation(fields: [franchise_id], references: [id])

  @@map("characters")
}

model Ink {
  id         Int      @id() @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  name       String
  notes      String?
  cards      Card[]
  decks      Deck[]

  @@map("inks")
}

model Keyword {
  id         Int      @id() @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  name       String
  notes      String?
  cards      Card[]

  @@map("keywords")
}

model Rarity {
  id         Int      @id() @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  name       String   @unique()
  image      String?
  notes      String?
  cards      Card[]

  @@map("rarities")
}

model Set {
  id          Int     @id()
  name        String  @unique()
  notes       String?
  released_at String
  cards       Card[]

  @@map("sets")
}

model Type {
  id         Int      @id() @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  name       String
  notes      String?
  cards      Card[]

  @@map("types")
}
